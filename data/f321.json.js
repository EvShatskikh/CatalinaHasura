window.repositoryObject = {"parameters_custom_fields":[],"object_id":"f321","name":"public.sync_atlas_issue","subtype":"FUNCTION","is_user_defined":false,"description":null,"summary":[{"field":"Documentation","value":{"_type":"link","name":"Hasura","id":"d4"}},{"field":"Schema","value":"public"},{"field":"Name","value":"sync_atlas_issue"},{"field":"Type","value":"Function"}],"script":"CREATE OR REPLACE FUNCTION public.sync_atlas_issue(hasura_session json, _issues json)\r\n RETURNS SETOF issue\r\n LANGUAGE sql\r\nAS $function$\r\nWITH paramData AS (\r\n    SELECT *\r\n    FROM json_to_recordset(_issues) AS param(\r\n                origin text,\r\n                pos_id bigint,\r\n                config jsonb,\r\n                is_active boolean,\r\n                completed_at timestamp,\r\n                created_at timestamp,\r\n                start_at timestamp,\r\n                plan_at date,\r\n                updated_client_at timestamp,\r\n                title text,\r\n                route_id bigint,\r\n                order_status text,\r\n                sync_status text,\r\n                start_by_org_structure text,\r\n                order_by text,\r\n                swe_id bigint\r\n            ) \r\n),\r\nvalidData AS (\r\n    SELECT paramData.*\r\n    FROM paramData\r\n    LEFT JOIN public.issue ON issue.origin = paramData.origin\r\n    WHERE (issue.created_by = (hasura_session ->> 'x-hasura-user-id')::text OR issue.created_by IS NULL)\r\n        AND ( \r\n            paramData.sync_status = issue.sync_status\r\n            OR issue.sync_status IS NULL\r\n            OR (paramData.sync_status = 'closed' AND issue.sync_status = 'open') \r\n        )\r\n),\r\nconflicts AS (\r\n    SELECT * \r\n    FROM public.issue\r\n    WHERE issue.origin IN (SELECT origin FROM paramData)\r\n        AND issue.origin NOT IN (SELECT origin FROM validData)\r\n),\r\nupdates AS (\r\n    INSERT INTO public.issue (origin,\r\n            pos_id,\r\n            config,\r\n            is_active,\r\n            completed_at,\r\n            created_at,\r\n            start_at,\r\n            plan_at,\r\n            updated_client_at,\r\n            title,\r\n            route_id,\r\n            order_status,\r\n            sync_status,\r\n            start_by_org_structure,\r\n            order_by,\r\n            swe_id,\r\n            created_by,\r\n            assigned_user_id)\r\n    SELECT origin\r\n        ,pos_id \r\n        ,config\r\n        ,is_active \r\n        ,completed_at\r\n        ,created_at \r\n        ,start_at\r\n        ,plan_at\r\n        ,updated_client_at\r\n        ,title \r\n        ,route_id\r\n        ,order_status \r\n        ,sync_status\r\n        ,start_by_org_structure\r\n        ,order_by\r\n        ,swe_id\r\n        ,(hasura_session ->> 'x-hasura-user-id')::text AS created_by\r\n        ,(hasura_session ->> 'x-hasura-user-id')::text AS assigned_user_id\r\n    FROM validData \r\n    ON CONFLICT ON CONSTRAINT issue_origin_key\r\n    DO UPDATE SET \r\n        completed_at = EXCLUDED.completed_at,\r\n        is_active = EXCLUDED.is_active,\r\n        config = EXCLUDED.config,\r\n        updated_client_at = EXCLUDED.updated_client_at,\r\n        start_at = EXCLUDED.start_at,\r\n        sync_status = EXCLUDED.sync_status,\r\n        order_status =  EXCLUDED.order_status,\r\n        order_by = EXCLUDED.order_by\r\n    RETURNING issue.*\r\n)\r\nSELECT * FROM conflicts\r\n$function$","parameters":[{"name":"Returns","description":null,"mode":"OUT","data_type":"issue","custom_fields":{}},{"name":"hasura_session","description":null,"mode":"IN","data_type":"json","custom_fields":{}},{"name":"_issues","description":null,"mode":"IN","data_type":"json","custom_fields":{}}],"dependencies":null,"imported_at":"2023-11-29 12:21"};