window.repositoryObject = {"parameters_custom_fields":[],"object_id":"f188","name":"public.get_issue_label","subtype":"FUNCTION","is_user_defined":false,"description":null,"summary":[{"field":"Documentation","value":{"_type":"link","name":"Hasura","id":"d4"}},{"field":"Schema","value":"public"},{"field":"Name","value":"get_issue_label"},{"field":"Type","value":"Function"}],"script":"CREATE OR REPLACE FUNCTION public.get_issue_label(hasura_session json)\r\n RETURNS SETOF label\r\n LANGUAGE plpgsql\r\n STABLE\r\nAS $function$\r\nDECLARE\r\n  acl_users text[];\r\n  acl_groups text[];\r\n  acl_issues int[];\r\n  user_id text;\r\nBEGIN\r\n    /* разрешенные исполнители */  \r\n    select array(SELECT email FROM get_user(hasura_session)) INTO acl_users;\r\n    /* разрешенные группы */\r\n    select array(SELECT name FROM get_user_group(hasura_session)) INTO acl_groups;\r\n    /* залогиненый юзер */\r\n    user_id := (hasura_session->>'x-hasura-user-id')::text;\r\n\r\n    /* разрешенные запросы */\r\n    select array(SELECT id FROM issue i WHERE is_active = true \r\n      AND (assigned_group_id = ANY (acl_groups)\r\n           OR assigned_user_id = ANY (acl_users)\r\n           OR jsonb_exists_any(participants, ARRAY[user_id]))) INTO acl_issues;\r\n\r\n    /* поиск меток */\r\n    RETURN QUERY SELECT * FROM label \r\n    WHERE EXISTS (SELECT label_id FROM issue_m2m_label WHERE issue_id = ANY (acl_issues) AND label_id = id)\r\n    ORDER BY category_id, name;\r\nreturn;\r\nEND\r\n$function$","parameters":[{"name":"Returns","description":null,"mode":"OUT","data_type":"label","custom_fields":{}},{"name":"hasura_session","description":null,"mode":"IN","data_type":"json","custom_fields":{}}],"dependencies":null,"imported_at":"2023-11-29 12:21"};