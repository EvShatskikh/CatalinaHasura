window.repositoryObject = {"parameters_custom_fields":[],"object_id":"f359","name":"atlas.get_last_visits","subtype":"FUNCTION","is_user_defined":false,"description":null,"summary":[{"field":"Documentation","value":{"_type":"link","name":"Hasura","id":"d4"}},{"field":"Schema","value":"atlas"},{"field":"Name","value":"get_last_visits"},{"field":"Type","value":"Function"}],"script":"CREATE OR REPLACE FUNCTION atlas.get_last_visits(_pos_ids bigint[], _new_pos_ids bigint[], _updated_at timestamp with time zone)\r\n RETURNS SETOF atlas.view_last_visit_scenes\r\n LANGUAGE plpgsql\r\n STABLE\r\nAS $function$\r\nBEGIN\r\n    RETURN QUERY SELECT CAST(sm2.pos_id AS text) AS pos_id\r\n        ,MAX(sm2.updated_at) AS updated_at\r\n        ,CASE WHEN jsonb_agg(to_jsonb(sm.scene_id))->>0 IS NOT NULL THEN jsonb_agg(to_jsonb(sm.scene_id)) ELSE '[]'::jsonb END AS scenes\r\n    FROM (\r\n        SELECT distinct on (s.pos_id) s.pos_id, issue_origin, s.updated_at\r\n        FROM atlas.sm s\r\n        JOIN public.issue i on i.origin = s.issue_origin and i.is_active = true and i.completed_at is not null\r\n        WHERE s.pos_id = ANY (_new_pos_ids) OR s.pos_id = ANY (_pos_ids)\r\n        order by pos_id, issue_origin desc, updated_at desc\r\n        ) sm2\r\n    left join atlas.sm on sm2.issue_origin = sm.issue_origin and sm.deleted = false\r\n    where sm2.pos_id = ANY (_new_pos_ids) OR (sm2.pos_id = ANY (_pos_ids) AND sm2.updated_at > _updated_at)\r\n    GROUP BY sm2.pos_id;\r\nEND\r\n$function$","parameters":[{"name":"Returns","description":null,"mode":"OUT","data_type":"view_last_visit_scenes","custom_fields":{}},{"name":"_pos_ids","description":null,"mode":"IN","data_type":"ARRAY","custom_fields":{}},{"name":"_new_pos_ids","description":null,"mode":"IN","data_type":"ARRAY","custom_fields":{}},{"name":"_updated_at","description":null,"mode":"IN","data_type":"timestamp with time zone","custom_fields":{}}],"dependencies":null,"imported_at":"2023-11-29 12:21"};