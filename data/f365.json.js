window.repositoryObject = {"parameters_custom_fields":[],"object_id":"f365","name":"notify.new_messages_to_user","subtype":"FUNCTION","is_user_defined":false,"description":null,"summary":[{"field":"Documentation","value":{"_type":"link","name":"Hasura","id":"d4"}},{"field":"Schema","value":"notify"},{"field":"Name","value":"new_messages_to_user"},{"field":"Type","value":"Function"}],"script":"CREATE OR REPLACE FUNCTION notify.new_messages_to_user(hasura_session json)\r\n RETURNS SETOF return_int_f\r\n LANGUAGE plpgsql\r\nAS $function$\r\nDECLARE\r\n    _ids int[];\r\n    _userId text;\r\n    _userHierlevel Int DEFAULT NULL;\r\n    _userType jsonb DEFAULT '[]'::jsonb;\r\n    _userActivityType jsonb DEFAULT '[]'::jsonb;\r\n    _userOrgStructure uuid;\r\n    _id int;\r\n    _insertedRow int default null;\r\n    _insertedRowCount int default 0;\r\nBEGIN\r\n\r\n/* залогиненый юзер */\r\nSELECT u.email, u.org_structure_id, o.hierlevel, o.user_type, o.user_activity_type\r\nINTO  _userId, _userOrgStructure, _userHierlevel, _userType, _userActivityType\r\nFROM public.user u\r\nLEFT JOIN public.org_structure o ON o.id = u.org_structure_id\r\nWHERE email = (hasura_session->>'x-hasura-user-id')::text;\r\n\r\nIF _userId IS NOT NULL THEN\r\n    /* новые сообщения пользователя */\r\n    SELECT array(\r\n        SELECT m.id\r\n        FROM notify.message m\r\n        WHERE is_active = true\r\n        AND jsonb_exists_any(apply_app, array['all', (hasura_session->>'x-hasura-role')::text])\r\n        AND date_from <= NOW() AND (date_to IS NULL OR date_to >= NOW())\r\n        -- user hierlevel\r\n        AND (apply_data->'user_hierlevel' IS NULL OR jsonb_exists_any(apply_data->'user_hierlevel',ARRAY[_userHierlevel::text]))\r\n         -- user types\r\n        AND (apply_data->'user_types' IS NULL OR jsonb_exists_any(apply_data->'user_types', ARRAY(SELECT jsonb_array_elements_text(_userType))))\r\n        -- user activities types\r\n        AND (apply_data->'user_activities' IS NULL OR jsonb_exists_any(apply_data->'user_activities',  ARRAY(SELECT jsonb_array_elements_text(_userActivityType))))\r\n        AND NOT EXISTS (SELECT * FROM notify.message_to_user u WHERE u.message_id = m.id AND u.user_id = (hasura_session->>'x-hasura-user_id')::text)\r\n    ) INTO _ids;\r\n\r\n    /* для каждого сообщения вставляем запись */\r\n    IF _ids IS NOT NULL AND array_length(_ids,1) > 0 THEN\r\n        FOREACH _id IN ARRAY _ids\r\n        LOOP\r\n                INSERT INTO notify.message_to_user (message_id, user_id, org_structure_id)\r\n                VALUES (_id, _userId, _userOrgStructure)\r\n                ON CONFLICT ON CONSTRAINT message_to_user_pkey DO NOTHING RETURNING message_id INTO _insertedRow;\r\n\r\n                /* считаем кол-во новых записей */\r\n                IF _insertedRow IS NOT NULL THEN\r\n                    _insertedRowCount := _insertedRowCount + 1;\r\n                END IF;\r\n        END LOOP;\r\n\r\n    END IF;\r\nEND IF;\r\n/* возвращаем кол-во новых записей */\r\nRETURN QUERY SELECT _insertedRowCount::bigint;\r\n\r\nEND\r\n$function$","parameters":[{"name":"Returns","description":null,"mode":"OUT","data_type":"return_int_f","custom_fields":{}},{"name":"hasura_session","description":null,"mode":"IN","data_type":"json","custom_fields":{}}],"dependencies":{"uses":[],"used_by":[]},"imported_at":"2024-02-15 12:25"};