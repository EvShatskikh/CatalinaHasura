window.repositoryObject = {"parameters_custom_fields":[],"object_id":"f232","name":"public.matrix_after_insert_trigger","subtype":"FUNCTION","is_user_defined":false,"description":null,"summary":[{"field":"Documentation","value":{"_type":"link","name":"Hasura","id":"d4"}},{"field":"Schema","value":"public"},{"field":"Name","value":"matrix_after_insert_trigger"},{"field":"Type","value":"Function"}],"script":"CREATE OR REPLACE FUNCTION public.matrix_after_insert_trigger()\r\n RETURNS trigger\r\n LANGUAGE plpgsql\r\nAS $function$  \r\nbegin  \r\n    /* Добавляем событие matrix_add */\r\n    INSERT INTO matrix_event (matrix_id, action, created_at, created_by) VALUES(new.id, 'matrix_add', new.created_at, new.created_by); \r\n\r\n    /* Если изменены настройки авто матрицы  */\r\n    IF new.is_auto THEN \r\n       INSERT INTO matrix_event (matrix_id, action, data, created_at, created_by) VALUES(new.id, 'matrix_auto', ('{\"name\": \"' || CASE WHEN new.is_auto = true THEN 'Автоматическая' ELSE 'Ручная' END || '\"}')::jsonb, new.updated_at, new.updated_by); \r\n       IF new.auto_filters != '{}'::jsonb THEN \r\n        INSERT INTO matrix_event (matrix_id, action, data, created_at, created_by) VALUES(new.id, 'matrix_auto_filters', new.auto_filters::jsonb, new.updated_at, new.updated_by); \r\n      END IF;\r\n    END IF;\r\n  return new;\r\nend  \r\n$function$","parameters":[{"name":"Returns","description":null,"mode":"OUT","data_type":"trigger","custom_fields":{}}],"dependencies":null,"imported_at":"2023-11-29 12:21"};