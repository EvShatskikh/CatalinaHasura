window.repositoryObject = {"parameters_custom_fields":[],"object_id":"f448","name":"hdb_catalog.notify_hasura_sm_delete_UPDATE","subtype":"FUNCTION","is_user_defined":false,"description":null,"summary":[{"field":"Documentation","value":{"_type":"link","name":"Hasura","id":"d4"}},{"field":"Schema","value":"hdb_catalog"},{"field":"Name","value":"notify_hasura_sm_delete_UPDATE"},{"field":"Type","value":"Function"}],"script":"CREATE OR REPLACE FUNCTION hdb_catalog.\"notify_hasura_sm_delete_UPDATE\"()\r\n RETURNS trigger\r\n LANGUAGE plpgsql\r\nAS $function$\r\n  DECLARE\r\n    _old record;\r\n    _new record;\r\n    _data json;\r\n  BEGIN\r\n    IF TG_OP = 'UPDATE' THEN\r\n      _old := row((SELECT  \"e\"  FROM  (SELECT  OLD.\"deleted\"        ) AS \"e\"      ) );\r\n      _new := row((SELECT  \"e\"  FROM  (SELECT  NEW.\"deleted\"        ) AS \"e\"      ) );\r\n    ELSE\r\n    /* initialize _old and _new with dummy values for INSERT and UPDATE events*/\r\n      _old := row((select 1));\r\n      _new := row((select 1));\r\n    END IF;\r\n    _data := json_build_object(\r\n      'old', row_to_json((SELECT  \"e\"  FROM  (SELECT  OLD.\"scene_no\" , OLD.\"region\" , OLD.\"updated_client_at\" , OLD.\"scene_id\" , OLD.\"response_json\" , OLD.\"planogram_id\" , OLD.\"img_qty\" , OLD.\"img_uploaded\" , OLD.\"pos_id\" , OLD.\"created_at\" , OLD.\"id\" , OLD.\"updated_at\" , OLD.\"camera_log\" , OLD.\"response_image\" , OLD.\"deleted\" , OLD.\"response_stat\" , OLD.\"issue_origin\" , OLD.\"created_by\" , OLD.\"name\"        ) AS \"e\"      ) ),\r\n      'new', row_to_json((SELECT  \"e\"  FROM  (SELECT  NEW.\"scene_no\" , NEW.\"region\" , NEW.\"updated_client_at\" , NEW.\"scene_id\" , NEW.\"response_json\" , NEW.\"planogram_id\" , NEW.\"img_qty\" , NEW.\"img_uploaded\" , NEW.\"pos_id\" , NEW.\"created_at\" , NEW.\"id\" , NEW.\"updated_at\" , NEW.\"camera_log\" , NEW.\"response_image\" , NEW.\"deleted\" , NEW.\"response_stat\" , NEW.\"issue_origin\" , NEW.\"created_by\" , NEW.\"name\"        ) AS \"e\"      ) )\r\n    );\r\n    BEGIN\r\n    /* NOTE: formerly we used TG_TABLE_NAME in place of tableName here. However in the case of\r\n    partitioned tables this will give the name of the partitioned table and since we use the table name to\r\n    get the event trigger configuration from the schema, this fails because the event trigger is only created\r\n    on the original table.  */\r\n      IF (TG_OP <> 'UPDATE') OR (_old <> _new) THEN\r\n        PERFORM hdb_catalog.insert_event_log(CAST('atlas' AS text), CAST('sm' AS text), CAST('sm_delete' AS text), TG_OP, _data);\r\n      END IF;\r\n      EXCEPTION WHEN undefined_function THEN\r\n        IF (TG_OP <> 'UPDATE') OR (_old *<> _new) THEN\r\n          PERFORM hdb_catalog.insert_event_log(CAST('atlas' AS text), CAST('sm' AS text), CAST('sm_delete' AS text), TG_OP, _data);\r\n        END IF;\r\n    END;\r\n\r\n    RETURN NULL;\r\n  END;\r\n$function$","parameters":[{"name":"Returns","description":null,"mode":"OUT","data_type":"trigger","custom_fields":{}}],"dependencies":null,"imported_at":"2023-11-29 12:21"};